import numpy as np
import torch
from torch.utils.data import Dataset, DataLoader
import h5py
import json
from sklearn.preprocessing import StandardScaler


class MetrLaDataset(Dataset):
    def __init__(self, h5_file, edge_index_file, event_triplet_file,
                 entity2id, relation2id, seq_len=12, pred_len=3, split='train'):
        """
        h5_file: 存储交通流数据
        edge_index_file: 路网边连接 npy
        event_triplet_file: 每个样本对应的事件三元组（JSON）
        """
        with h5py.File(h5_file, 'r') as f:
            self.data = f['df'][:].astype(np.float32)  # shape (T, N)
        self.num_nodes = self.data.shape[1]

        # 标准化
        self.scaler = StandardScaler()
        self.data = self.scaler.fit_transform(self.data)

        self.seq_len = seq_len
        self.pred_len = pred_len

        # 数据划分
        T = self.data.shape[0]
        train_end = int(T * 0.7)
        val_end = int(T * 0.9)
        if split == 'train':
            self.indices = range(0, train_end - seq_len - pred_len)
        elif split == 'val':
            self.indices = range(train_end, val_end - seq_len - pred_len)
        else:
            self.indices = range(val_end, T - seq_len - pred_len)

        # 路网边连接
        self.edge_index = torch.LongTensor(np.load(edge_index_file))  # shape (2, E)

        # 加载事件知识图谱
        with open(event_triplet_file, 'r') as f:
            self.event_data = json.load(f)

        self.entity2id = entity2id
        self.relation2id = relation2id

    def __len__(self):
        return len(self.indices)

    def encode_event_triplets(self, triplets):
        """
        将事件三元组编码为 (head_id, relation_id, tail_id) 格式
        """
        encoded = []
        for h, r, t in triplets:
            h_id = self.entity2id.get(h, 0)
            r_id = self.relation2id.get(r, 0)
            t_id = self.entity2id.get(t, 0)
            encoded.append((h_id, r_id, t_id))
        return encoded

    def __getitem__(self, idx):
        i = self.indices[idx]
        seq_x = self.data[i:i+self.seq_len]         # (seq_len, num_nodes)
        seq_y = self.data[i+self.seq_len:i+self.seq_len+self.pred_len]  # (pred_len, num_nodes)

        # 获取事件 triplets
        event_triplets = self.event_data[str(i)]  # 假设键为字符串形式的样本位置
        encoded_triplets = self.encode_event_triplets(event_triplets)

        return (
            torch.FloatTensor(seq_x),        # traffic_x: (seq_len, num_nodes)
            torch.FloatTensor(seq_y),        # traffic_y: (pred_len, num_nodes)
            torch.LongTensor(encoded_triplets),  # (num_triplets, 3)
            self.edge_index                  # (2, E)
        )
